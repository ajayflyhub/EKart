// <auto-generated />
using System;
using AjayDemoEcart.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AjayDemoEcart.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250210075129_AddProductsBack")]
    partial class AddProductsBack
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AjayDemoEcart.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.PrimitiveCollection<string>("ProductIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ergonomic wireless mouse with adjustable DPI and 2.4 GHz connectivity.",
                            ImageURL = "https://images.unsplash.com/photo-1611532736570-dd6b097ecbb3?q=80&w=1887&auto=format&fit=crop",
                            Name = "Wireless Mouse",
                            Price = 29.99m,
                            Quantity = 150
                        },
                        new
                        {
                            Id = 2,
                            Description = "Over-ear Bluetooth headphones with noise cancellation and 20 hours of battery life.",
                            ImageURL = "https://images.unsplash.com/photo-1674989844487-722ec77b9b81?q=80&w=1887&auto=format&fit=crop",
                            Name = "Bluetooth Headphones",
                            Price = 79.99m,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 3,
                            Description = "Non-slip yoga mat made of eco-friendly material, 6mm thick.",
                            ImageURL = "https://plus.unsplash.com/premium_photo-1675155952889-abb299df1fe7?w=500&auto=format&fit=crop&q=60",
                            Name = "Yoga Mat",
                            Price = 19.99m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 4,
                            Description = "Feature-packed smartwatch with fitness tracking and heart rate monitoring.",
                            ImageURL = "https://images.unsplash.com/photo-1598971262973-d694be2402f9?w=800&q=80&fit=crop",
                            Name = "Smartwatch",
                            Price = 129.99m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 5,
                            Description = "Mechanical gaming keyboard with RGB backlight and customizable keys.",
                            ImageURL = "https://images.unsplash.com/photo-1545070915-cbdf5bdaa9a3?w=800&q=80&fit=crop",
                            Name = "Gaming Keyboard",
                            Price = 49.99m,
                            Quantity = 120
                        },
                        new
                        {
                            Id = 6,
                            Description = "10,000mAh power bank with dual USB ports and fast charging support.",
                            ImageURL = "https://images.unsplash.com/photo-1611080624812-0a5f93b41716?w=800&q=80&fit=crop",
                            Name = "Portable Charger",
                            Price = 39.99m,
                            Quantity = 90
                        },
                        new
                        {
                            Id = 7,
                            Description = "65-inch 4K UHD Smart TV with HDR and built-in streaming apps.",
                            ImageURL = "https://images.unsplash.com/photo-1600952911946-a0ca5a93b8df?w=800&q=80&fit=crop",
                            Name = "4K Smart TV",
                            Price = 999.99m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 8,
                            Description = "Lightweight running shoes with breathable fabric and superior cushioning.",
                            ImageURL = "https://images.unsplash.com/photo-1618354699041-1a70275c876d?w=800&q=80&fit=crop",
                            Name = "Running Shoes",
                            Price = 59.99m,
                            Quantity = 180
                        },
                        new
                        {
                            Id = 9,
                            Description = "1.7-liter electric kettle with auto shut-off and boil-dry protection.",
                            ImageURL = "https://images.unsplash.com/photo-1556911220-e15b29be8c72?w=800&q=80&fit=crop",
                            Name = "Electric Kettle",
                            Price = 24.99m,
                            Quantity = 110
                        },
                        new
                        {
                            Id = 10,
                            Description = "LED desk lamp with adjustable brightness and color temperature.",
                            ImageURL = "https://images.unsplash.com/photo-1547658717-2fca7a2b8a81?w=800&q=80&fit=crop",
                            Name = "Desk Lamp",
                            Price = 34.99m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 12,
                            Description = "Adjustable stand for smartphones, compatible with most models.",
                            ImageURL = "https://images.unsplash.com/photo-1614829946437-bb5e1e7b58e9?w=800&q=80&fit=crop",
                            Name = "SAMSUNG PHONE",
                            Price = 19.99m,
                            Quantity = 250
                        });
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Address", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Cart", b =>
                {
                    b.HasOne("AjayDemoEcart.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AjayDemoEcart.Models.Order", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
